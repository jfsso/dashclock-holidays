// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

apply plugin: 'android'
apply plugin: 'hugo'
apply plugin: 'crashlytics'

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

android {
    compileSdkVersion 19
    buildToolsVersion '19.0.3'

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 19

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
    }

    signingConfigs {
        release {
            Properties props = new Properties()
            props.load(new FileInputStream(file("../keystore.properties")))
            storeFile file(props['signing.release.storeFile'])
            keyAlias props['signing.release.keyAlias']
            storePassword props['signing.release.storePassword']
            keyPassword props['signing.release.keyPassword']
        }
    }

    buildTypes {
        release {
            zipAlign true
            signingConfig signingConfigs.release
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    compile 'org.mnode.ical4j:ical4j:1.0.+'
    compile 'com.google.android.apps.dashclock:dashclock-api:+'
    compile 'com.android.support:support-v4:19.0.+'
    compile 'com.squareup.okhttp:okhttp:1.3.+'
    compile 'com.crashlytics.android:crashlytics:1.+'
    compile 'com.jakewharton.timber:timber:2.1.+'
    compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
}

task readPasswordFromInput << {
    if(!android.signingConfigs.release.keyPassword || !android.signingConfigs.release.storePassword) {
        android.signingConfigs.release.storePassword = new String(System.console().readPassword("\$ Store password: "))
        android.signingConfigs.release.keyPassword = new String(System.console().readPassword("\$ Key password: "))
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'validateReleaseSigning') {
        task.dependsOn readPasswordFromInput
    }
}